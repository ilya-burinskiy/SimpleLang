prog    -> line_ | e
line_   -> line line_ | e
line    -> stmt | def


def     -> let id = expr;

stmt    -> LAstmt      // label or assigment stmt
        |  ifstmt
        |  gotostmt
        |  inputstmt
        |  printstmt

LAstmt -> id LA        // label or assigment
LA     -> assigment 
       | label

label     -> :
assigment -> = expr;

ifstmt    -> if expr relop expr goto id;
gotostmt  -> goto label;
inputstmt -> input id;
printstmt -> print id;

expr   -> term exr_
exr_   -> + term exrp_ 
       |  - term expr_     
       | e

term   -> factor term_
term_  -> * factor term_ 
       |  / factor term_
       | e

factor -> (expr) | num | id | -u factor 

FIRST(prog)      = {FIRST(line), e}  = {let, id, if, goto, print, input, e}
FIRST(line_)     = {FIRST(line), e}  = {let, id, if, goto, print, input, e}
FIRST(line)      = {let, id, if, goto, print, input}

FIRST(def)       = {let}
FIRST(stmt)      = {id, if, goto, print, input}
FIRST(LAstmt)    = {id}
FIRST(LA)        = {:, =}
FIRST(label)     = {:}
FIRST(assigment) = {=}
FIRST(ifstmt)    = {if}
FIRST(gotostmt)  = {goto}
FIRST(inputstmt) = {input}
FIRST(printstmt) = {print}

FIRST(expr)      = {(, num, id, -u}
FIRST(expr_)     = {+, -, e}
FIRST(term)      = {(, num, id, -u}
FIRST(term_)     = {*, /, e}
FIRST(factor)    = {(, num, id, -u}

FOLLOW(factor)    = {+, -, *, /, ), relop, goto, ;}
FOLLOW(term_)     = {+, -, ), relop, goto, ;}
FOLLOW(term)      = {+, -, ), relop, goto, ;}
FOLLOW(expr_)     = {), relop, goto, ;}
FOLLOW(expr)      = {), relop, goto, ;}
FOLLOW(printstmt) = FOLLOW(inputstmt) = FOLLOW(gotostmt) = FOLLOW(ifstmt) = {;}
FOLLOW(LA)        = {:, ;}
FOLLOW(LAstmt)    = {:, ;}
FOLLOW(stmt)      = {FIRST(line), $}
FOLLOW(def)       = {FIRST(line), $}
FOLLOW(line)      = {FIRST(line), $}
FOLLOW(line_)     = {FIRST(line), $}
FOLLOW(prog)      = {$}

